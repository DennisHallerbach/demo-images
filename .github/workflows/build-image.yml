
name: FACTORY

run-name: 'Building ${{ inputs.imageName }} (${{ inputs.imageVersion}})'

on:
  workflow_dispatch:
    inputs:
      imageName:
        type: string
        required: true
      imageVersion:
        type: string
        required: true

concurrency:
  group: '${{ github.ref }}-${{ github.event.inputs.imageName }}'
  cancel-in-progress: true

jobs:
  build:
    if: ${{ (github.event.sender.type == 'Bot') }}
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash
        working-directory: ${{ format('./{0}', inputs.imageName) }}

    steps:

      - name: Download Source
        uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install JSON2HCL
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 2
          command: |
            JSON2HCL_URL=$(curl --silent "https://api.github.com/repos/kvz/json2hcl/releases/latest" | jq --raw-output '.assets[].browser_download_url | select(contains("_linux_amd64.tar.gz"))')
            [ ! -z "$JSON2HCL_URL" ] && echo "Downloading JSON2HCL from $JSON2HCL_URL" || sleep 10s
            wget -qc $JSON2HCL_URL -O - | tar -xz -C ${{ runner.temp }} && chmod 755 ${{ runner.temp }}/json2hcl
            [ -f "${{ runner.temp }}/json2hcl" ] && echo "JSON2HCL is available at ${{ runner.temp }}/json2hcl" || exit 1

      - name: Resolve Image Information
        id: image
        run: |
          JSON2HCL_OUTPUT=$(${{ runner.temp }}/json2hcl -reverse < ./image.pkr.hcl | tee ${{ runner.temp }}/image.json)
          echo "image_publisher=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT | tee -a ${{ runner.temp }}/image.info

      - name: Cleanup Factory Subscription        
        uses: azure/CLI@v1
        with:
          inlineScript: |
            RGNAME_PREFIX=$(echo "PKR-${{ inputs.imageName }}" | tr [:lower:] [:upper:])
            RGNAME_SUFFIX=$(echo "-$GITHUB_WORKFLOW" | tr [:lower:] [:upper:])
            for RESOURCEGROUP in $(az group list --subscription ${{ steps.image.outputs.devcenter_subscription }} | jq --raw-output ".[] | select((.name | ascii_upcase | startswith(\"$RGNAME_PREFIX\")) and (.name | ascii_upcase | endswith(\"$RGNAME_SUFFIX\"))) | .name"); do
              echo "Deleting resource group '$RESOURCEGROUP' in subscription '${{ steps.image.outputs.devcenter_subscription }}' ..."
              az group delete --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group $RESOURCEGROUP --force-deletion-types 'Microsoft.Compute/virtualMachines' --no-wait --yes
            done
  
      - name: Ensure Image Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-definition create \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ inputs.imageName }} \
              --publisher ${{ steps.image.outputs.image_publisher }} \
              --offer ${{ steps.image.outputs.image_offer }} \
              --sku ${{ steps.image.outputs.image_sku }} \
              --os-type Windows \
              --os-state Generalized \
              --hyper-v-generation V2 \
              --features 'SecurityType=TrustedLaunch' \
              --only-show-errors 2>&1

      - name: Cleanup Image Version
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-version delete \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ inputs.imageName }} \
              --gallery-image-version '${{ inputs.imageVersion }}' \
              --only-show-errors 2>&1

      - name: Prepare Image
        run: cp -f ${{ github.workspace }}/_core/*.pkr.hcl ./

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.8.7"

      - name: Init Packer
        run: packer init .

      - name: Build Image
        id: packer
        run: |
          packer build -force -color=false -on-error=abort -timestamp-ui -var "imageSuffix=${{ github.workflow.name }}" -var "imageVersion=${{ inputs.imageVersion }}" . | tee ./image.pkr.log
          echo "gallery_imageid=$(tail -n 15 ./image.pkr.log | grep 'ManagedImageSharedImageGalleryId: ' | cut -d ' ' -f 2-)" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT | tee -a ${{ runner.temp }}/image.info

      - name: Upload Image Info
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.imageName }}
          path: |
            ${{ runner.temp }}/image.info
            ${{ runner.temp }}/image.json

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.packer.outputs.gallery_imageid }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            DEVCENTERGALLERY_IMAGEID="$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.packer.outputs.gallery_imageid }}' | cut -d '/' -f 10-)"
            az devcenter admin devbox-definition create \
              --dev-box-definition-name "${{ inputs.imageName }}-PRE" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="$DEVCENTERGALLERY_IMAGEID" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --no-wait \
              --only-show-errors 2>&1
     
  release:
    needs: build
    runs-on: ubuntu-latest    
    environment: Production

    defaults:
      run:
        shell: bash
        working-directory: ${{ format('./{0}', inputs.imageName) }}
    
    steps:

      - name: Download Image Info
        uses: actions/download-artifact@v3

      - name: Load Image Info
        id: image
        run: cat ./image.info >> $GITHUB_OUTPUT && cat $GITHUB_OUTPUT

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
  
      - name: Promote Image to Latest
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-version update \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ inputs.imageName }} \
              --gallery-image-version ${{ inputs.imageVersion }} \
              --set publishingProfile.excludeFromLatest=false \
              --only-show-errors 2>&1

      - name: Determine Image Reference ID & Type
        id: reference
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            echo "referenceId_version=$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f 10-)" >> $GITHUB_OUTPUT
            echo "referenceId_latest=$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.image.outputs.gallery_imageid }}' | cut -d '/' -f 10- | cut -d '/' -f -2)" >> $GITHUB_OUTPUT
            echo "referenceVersion=$(az devcenter admin devbox-definition show \          
              --dev-box-definition-name "${{ inputs.imageName }}" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --query "contains(imageReference.id, '/versions/')" 2> /dev/null || echo 'false')" >> $GITHUB_OUTPUT
            cat $GITHUB_OUTPUT

      - name: Create or Update DevBox Definition (EXPLICIT VERSION)
        if: ${{ (steps.reference.outputs.referenceVersion == 'true') }}
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            az devcenter admin devbox-definition create \
              --dev-box-definition-name "${{ inputs.imageName }}" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="${{ steps.reference.outputs.referenceId_version }}" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --no-wait \
              --only-show-errors 2>&1              

      - name: Create or Update DevBox Definition (LATEST VERSION)
        if: ${{ (steps.reference.outputs.referenceVersion == 'false') }}
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            az devcenter admin devbox-definition create \
              --dev-box-definition-name "${{ inputs.imageName }}" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="${{ steps.reference.outputs.referenceId_latest }}" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --no-wait \
              --only-show-errors 2>&1              