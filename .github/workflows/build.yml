
name: FACTORY

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true
      
jobs:
  build-matrix:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate Image Matrix
        id: set-matrix
        run: echo "matrix=$(find . -type f -name 'image.pkr.hcl' | sed -r 's|/[^/]+$||' | sort -u | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT

  build:
    needs: build-matrix
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build-matrix.outputs.matrix) }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.image }}

    steps:

      - uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install JSON2HCL
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 1
          command: |
            JSON2HCL_URL=$(curl --silent "https://api.github.com/repos/kvz/json2hcl/releases/latest" | jq --raw-output '.assets[].browser_download_url | select(contains("_linux_amd64.tar.gz"))')
            wget -qc $JSON2HCL_URL -O - | tar -xz -C $RUNNER_TEMP && chmod 755 $RUNNER_TEMP/json2hcl

      - name: Resolve Gallery Image Information
        id: image
        run: |
          JSON2HCL_OUTPUT=$($RUNNER_TEMP/json2hcl -reverse < ./image.pkr.hcl)
          echo "image_definition=$(basename "${{ matrix.image }}")" >> $GITHUB_OUTPUT
          echo "image_publisher=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT
      
      - name: Ensure Gallery Image Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-definition create \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ steps.image.outputs.image_definition }} \
              --publisher ${{ steps.image.outputs.image_publisher }} \
              --offer ${{ steps.image.outputs.image_offer }} \
              --sku ${{ steps.image.outputs.image_sku }} \
              --os-type Windows \
              --os-state Generalized \
              --hyper-v-generation V2 \
              --features 'SecurityType=TrustedLaunch' \
              --only-show-errors 2>&1

      - name: Prepare Image Definition
        run: cp -f ${{ github.workspace }}/_core/*.pkr.hcl ./

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.8.7"

      - name: Init Packer
        run: packer init .

      - name: Build Image
        run: packer build -force -color=false -on-error=abort -timestamp-ui -var "imageSuffix=$GITHUB_WORKFLOW" . | tee ./image.pkr.log

      - name: Resolve Gallery Image Version ResourceId
        id: imageversion
        run: |
          echo "image_resourceid=$(tail -n 15 ./image.pkr.log | grep 'ManagedImageSharedImageGalleryId: ' | cut -d ' ' -f 2-)" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            az devcenter admin devbox-definition create \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="${{ steps.imageversion.outputs.image_resourceid }}" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku ${{ steps.image.outputs.devcenter_compute }} \
              --no-wait \
              --hibernate-support Enabled \
              --only-show-errors 2>&1      