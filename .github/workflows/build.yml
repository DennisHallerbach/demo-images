
name: FACTORY

on:
  push:
    branches: [ "main" ]

  workflow_dispatch:
  
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: ${{ !contains(github.event.head_commit.message, '#NOCI') }}

jobs:
  build:
    if: ${{ !contains(github.event.head_commit.message, '#NOCI') }}
    runs-on: ubuntu-latest

    outputs:
      imageMatrix: ${{ steps.set-imageMatrix.outputs.matrix }}
      imageVersion: ${{ steps.set-imageVersion.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate Image Matrix
        id: set-imageMatrix
        run: |
          echo "matrix=$(find . -type f -name 'image.pkr.hcl' | sed -r 's|/[^/]+$||' | sort -u | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT      
          cat $GITHUB_OUTPUT

      - name: Generate Image Version
        id: set-imageVersion
        run: |
          echo "version=$(date -u +'%Y.%m%d.%H%M')" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  build-image:
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build.outputs.imageMatrix) }} 

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.image }}

    steps:

      - uses: actions/checkout@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install JSON2HCL
        uses: nick-fields/retry@v2
        with:
          max_attempts: 5
          timeout_minutes: 2
          command: |
            JSON2HCL_URL=$(curl --silent "https://api.github.com/repos/kvz/json2hcl/releases/latest" | jq --raw-output '.assets[].browser_download_url | select(contains("_linux_amd64.tar.gz"))')
            [ ! -z "$JSON2HCL_URL" ] && echo "Downloading JSON2HCL from $JSON2HCL_URL" || sleep 10s
            wget -qc $JSON2HCL_URL -O - | tar -xz -C ${{ runner.temp }} && chmod 755 ${{ runner.temp }}/json2hcl
            [ -f "${{ runner.temp }}/json2hcl" ] && echo "JSON2HCL is available at ${{ runner.temp }}/json2hcl" || exit 1

      - name: Resolve Image Information
        id: image
        run: |
          JSON2HCL_OUTPUT=$(${{ runner.temp }}/json2hcl -reverse < ./image.pkr.hcl | tee ./image.json)
          echo "image_definition=$(basename "${{ matrix.image }}")" >> $GITHUB_OUTPUT
          echo "image_publisher=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT
          
      - name: Cleanup Factory Subscription        
        uses: azure/CLI@v1
        with:
          inlineScript: |
            RGNAME_PREFIX=$(echo "PKR-${{ steps.image.outputs.image_definition }}" | tr [:lower:] [:upper:])
            RGNAME_SUFFIX=$(echo "-$GITHUB_WORKFLOW" | tr [:lower:] [:upper:])
            for RESOURCEGROUP in $(az group list --subscription ${{ steps.image.outputs.devcenter_subscription }} | jq --raw-output ".[] | select((.name | ascii_upcase | startswith(\"$RGNAME_PREFIX\")) and (.name | ascii_upcase | endswith(\"$RGNAME_SUFFIX\"))) | .name"); do
              echo "Deleting resource group '$RESOURCEGROUP' in subscription '${{ steps.image.outputs.devcenter_subscription }}' ..."
              az group delete --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group $RESOURCEGROUP --force-deletion-types 'Microsoft.Compute/virtualMachines' --no-wait --yes
            done

      - name: Ensure Image Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-definition create \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ steps.image.outputs.image_definition }} \
              --publisher ${{ steps.image.outputs.image_publisher }} \
              --offer ${{ steps.image.outputs.image_offer }} \
              --sku ${{ steps.image.outputs.image_sku }} \
              --os-type Windows \
              --os-state Generalized \
              --hyper-v-generation V2 \
              --features 'SecurityType=TrustedLaunch' \
              --only-show-errors 2>&1

      - name: Cleanup Image Version
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-version delete \
              --subscription ${{ steps.image.outputs.gallery_subscription }} \
              --resource-group ${{ steps.image.outputs.gallery_resourcegroup }} \
              --gallery-name ${{ steps.image.outputs.gallery_name }} \
              --gallery-image-definition ${{ steps.image.outputs.image_definition }} \
              --gallery-image-version '${{ needs.build.outputs.imageVersion }}' \
              --only-show-errors 2>&1

      - name: Prepare Image
        run: cp -f ${{ github.workspace }}/_core/*.pkr.hcl ./

      - name: Setup Packer
        uses: hashicorp/setup-packer@main
        with:
          version: "1.8.7"

      - name: Init Packer
        run: packer init .

      - name: Build Image
        id: packer
        run: |
          packer build -force -color=false -on-error=abort -timestamp-ui -var "imageSuffix=$GITHUB_WORKFLOW" -var "imageVersion=${{ needs.build.outputs.imageVersion }}" . | tee ./image.pkr.log
          echo "$(tail -n 15 ./image.pkr.log | grep 'ManagedImageSharedImageGalleryId: ' | cut -d ' ' -f 2-)" > ./image.id
          echo "ManagedImageSharedImageGalleryId=$(tail -n 15 ./image.pkr.log | grep 'ManagedImageSharedImageGalleryId: ' | cut -d ' ' -f 2-)" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.packer.outputs.ManagedImageSharedImageGalleryId }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            DEVCENTERGALLERY_IMAGEID="$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.packer.outputs.ManagedImageSharedImageGalleryId }}' | cut -d '/' -f 10-)"
            az devcenter admin devbox-definition create \
              --dev-box-definition-name "${{ steps.image.outputs.image_definition }}-PRE" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="$DEVCENTERGALLERY_IMAGEID" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --no-wait \
              --only-show-errors 2>&1

      - name: Collect Image Artifacts
        run: mkdir -p '${{ runner.temp }}/artifacts' && cp ./image.* '${{ runner.temp }}/artifacts/'
      
      - name: Upload Image Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.image.outputs.image_definition }}
          path: ${{ runner.temp }}/artifacts/
   
  promote:
    needs: build-image
    runs-on: ubuntu-latest    
    environment: promoted

    steps:

      - name: Promotion approved
        run: echo 'done'
  
  promote-image:
    needs: [build, promote]
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.build.outputs.imageMatrix) }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.image }}
    
    steps:

      - name: Download Image Artifacts
        uses: actions/download-artifact@v3

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Resolve Image Information
        id: image
        run: |
          JSON2HCL_OUTPUT=$(cat ./image.json)
          echo "image_id=$(cat ./image.id)" >> $GITHUB_OUTPUT
          echo "image_definition=$(basename "${{ matrix.image }}")" >> $GITHUB_OUTPUT
          echo "image_publisher=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT

      - name: Promote Image to Latest
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az sig image-version update \
              --subscription $(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f3) \
              --resource-group $(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f5) \
              --gallery-name $(echo '${{ steps.image.outputs.image_id}}' | cut -d '/' -f9) \
              --gallery-image-definition $(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f11) \
              --gallery-image-version $(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f13) \
              --set publishingProfile.excludeFromLatest=false \
              --only-show-errors 2>&1

      - name: Create or Update DevBox Definition
        uses: azure/CLI@v1
        with:
          inlineScript:	|
            az extension add --name devcenter --upgrade --yes
            COMPUTEGALLERY_RESOURCEID=$(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f -9)
            DEVCENTERGALLERY_RESOURCEID=$(az devcenter admin gallery list --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} --dev-center ${{ steps.image.outputs.devcenter_name }} | jq --raw-output ".[] | select(.galleryResourceId == \"$COMPUTEGALLERY_RESOURCEID\") | .id")
            DEVCENTERGALLERY_IMAGEID="$DEVCENTERGALLERY_RESOURCEID/$(echo '${{ steps.image.outputs.image_id }}' | cut -d '/' -f 10-)"
            az devcenter admin devbox-definition create \
              --dev-box-definition-name "${{ steps.image.outputs.image_definition }}" \
              --subscription ${{ steps.image.outputs.devcenter_subscription }} \
              --resource-group ${{ steps.image.outputs.devcenter_resourcegroup }} \
              --dev-center ${{ steps.image.outputs.devcenter_name }} \
              --image-reference id="$DEVCENTERGALLERY_IMAGEID" \
              --os-storage-type ${{ steps.image.outputs.devcenter_storage }} \
              --sku name="${{ steps.image.outputs.devcenter_compute }}" \
              --no-wait \
              --only-show-errors 2>&1              