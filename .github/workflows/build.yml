
name: FACTORY-DISPATCH

on:
  push:
    branches: [ "main" ]
  
jobs:
  prepare:
    if: ${{ !contains(github.event.head_commit.message, '#NOCI') }}
    runs-on: ubuntu-latest

    outputs:
      imageMatrix: ${{ steps.set-imageMatrix.outputs.matrix }}
      imageVersion: ${{ steps.set-imageVersion.outputs.version }}

    steps:
      - uses: actions/checkout@v3

      - name: Generate Image Matrix
        id: set-imageMatrix
        run: |
          echo "matrix=$(find . -type f -name 'image.pkr.hcl' | sed -r 's|/[^/]+$||' | sort -u | jq -R -s -c 'split("\n")[:-1]')" >> $GITHUB_OUTPUT      
          cat $GITHUB_OUTPUT

      - name: Generate Image Version
        id: set-imageVersion
        run: |
          echo "version=$(date -u +'%Y.%m%d.%H%M')" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT

  dispatch:
    needs: prepare
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.prepare.outputs.imageMatrix) }} 

    defaults:
      run:
        shell: bash
        working-directory: ${{ matrix.image }}

    steps:

      - uses: actions/checkout@v3

      - name: Resolve Image Information
        id: image
        run: |
          JSON2HCL_OUTPUT=$(${{ runner.temp }}/json2hcl -reverse < ./image.pkr.hcl | tee ./image.json)
          echo "image_definition=$(basename "${{ matrix.image }}")" >> $GITHUB_OUTPUT
          echo "image_publisher=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].publisher')" >> $GITHUB_OUTPUT
          echo "image_offer=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].offer')" >> $GITHUB_OUTPUT
          echo "image_sku=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].image[0].sku')" >> $GITHUB_OUTPUT
          echo "gallery_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].subscription')" >> $GITHUB_OUTPUT
          echo "gallery_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "gallery_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].gallery[0].name')" >> $GITHUB_OUTPUT
          echo "devcenter_subscription=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].subscription')" >> $GITHUB_OUTPUT
          echo "devcenter_resourcegroup=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].resourceGroup')" >> $GITHUB_OUTPUT
          echo "devcenter_name=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].name')" >> $GITHUB_OUTPUT          
          echo "devcenter_storage=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].storage')" >> $GITHUB_OUTPUT          
          echo "devcenter_compute=$(echo $JSON2HCL_OUTPUT | jq --raw-output '.locals[0].devCenter[0].compute')" >> $GITHUB_OUTPUT          
          cat $GITHUB_OUTPUT

      - name: Cleanup Factory Subscription        
        uses: azure/CLI@v1
        with:
          inlineScript: |
            RGNAME_PREFIX=$(echo "PKR-${{ steps.image.outputs.image_definition }}" | tr [:lower:] [:upper:])
            RGNAME_SUFFIX=$(echo "-$GITHUB_WORKFLOW" | tr [:lower:] [:upper:])
            for RESOURCEGROUP in $(az group list --subscription ${{ steps.image.outputs.devcenter_subscription }} | jq --raw-output ".[] | select((.name | ascii_upcase | startswith(\"$RGNAME_PREFIX\")) and (.name | ascii_upcase | endswith(\"$RGNAME_SUFFIX\"))) | .name"); do
              echo "Deleting resource group '$RESOURCEGROUP' in subscription '${{ steps.image.outputs.devcenter_subscription }}' ..."
              az group delete --subscription ${{ steps.image.outputs.devcenter_subscription }} --resource-group $RESOURCEGROUP --force-deletion-types 'Microsoft.Compute/virtualMachines' --no-wait --yes
            done

      - name: Trigger Image Build
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'build-image.yml',
              ref: 'main',
              inputs: {
                imageName: ${{ steps.image.outputs.image_definition }}
                iamgeVersion: ${{ needs.prepare.outputs.imageVersion }}
              },
            })

  